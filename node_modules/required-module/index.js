let ROOT, dependency, dependencyModules = {};

const $fs = require('fs');
const $path = require('path');

let path = __dirname;

while (!ROOT && path.length > 1) {
  if ($fs.existsSync(path + '/dependency.json') && !path.match('node_modules/required-module')) {
    ROOT = path;
  } else {
    path = path
      .split('/')
      .filter((item, index, arr) => index !== (arr.length - 1))
      .join('/');
  }
}

if (!ROOT) {
  throw new Error('dependency.json is not found');
} else {
  dependency = require($path.resolve(ROOT, 'dependency.json'));
}

// ----
dependencyModules = Object.keys(dependency.alias).reduce((r, key) => {
  r[key] = getModule(dependency.alias[key]);

  return r;
}, {});

// ----

function getModule (name) {
  if (name && typeof name === 'object') {
    return getModules(name);
  }


  name = name.replace(/^\/+/, '');

  if (!dependencyModules[name]) {
    try {
      return require(name);
    } catch (err) {
      return require($path.resolve(ROOT, name));
    }
  } else {
    return dependencyModules[name];
  }
}

function getModules (list) {
  if (list instanceof Array) {
    return list.map((path) => getModule(path));
  }

  return Object.keys(list).reduce((r, name) => {
    const path = list[name];

    r[name] = getModule(path);

    return r;
  }, {});
}

global[dependency.global] = getModule;
module.exports = getModule;